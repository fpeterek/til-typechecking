start = {sentence};

sentence = sentence content, termination;

sentence content = type definition
                 | entity definition
	             | construction
//               | object definition
                 | global variable definition
;

termination = optional whitespace,".",optional whitespace;

type definition = "TypeDef", whitespace, 
	type name, optional whitespace, 
	":=", optional whitespace, 
	data type
;

//nadefinovaný object není možno nikde použít
/*
TODO v budoucnu bude Makro
object definition = "ObjectDef", whitespace, 
	object name, optional whitespace, 
	":=", optional whitespace, 
	construction
;
*/

entity definition = entity name,
		{optional whitespace,",", optional whitespace, entity name},
		optional whitespace, "/", optional whitespace, 
		data type 
;

//problem s levou rekurzí u composition(vyreseno presunutim "@wt" sem)
//TODO přidat očíslování
construction = (
			trivialisation |
		 	variable |
		 	closure |
			n-execution |
			composition
			) [,"@wt"]
;

//defaultní typy pro proměnné 
//pokud proměnné v uzávěru nemá typ dosadí se typ z této definice
global variable definition = variable name, 
	{optional whitespace, ",", optional whitespace, variable name},
	optional whitespace, "->", optional whitespace,
	datatype
;

//zpřehlednění
data type = (
              embeded type
	    | list type
	    | touple type
	    | user type
	    | enclosed data type
	    ) [, '@tw']
;

embeded type = "Bool"
	     | "Indiv"
	     | "Time"
	     | "String"
	     | "World"
	     | "Real"
	     | "Int"
	     | Any
	     | "*"
;

list type = "List", optional whitespace, "(", optional whitespace, data type, optional whitespace, ")";

touple type = "Tuple", optional whitespace, "(", optional whitespace, data type, optional whitespace, ")";

user type = type name;

//zjednodušení, odstranění levé rekurze
enclosed data type = "(", optional whitespace, data type, {whitespace, data type}, optional whitespace ")";

variable = variable name;

trivialisation = "'", optional whitespace, (construction | entity);

//odstranění levé rekurze
composition = 
	"[", optional whitespace, 
	construction, 
	optional whitespace, 
	construction, 
	{construction}, 
	optional whitespace, 
	"]"
;

closure = "[", 
	optional whitespace, 
	lambda variables, 
	optional whitespace, 
	construction,
	optional whitespace, 
	"]"
;

lambda variables = "\", optional whitespace, typed variables;

//zjednodušení
typed variables = typed variable, {optional whitespace,",", typed variable};

typed variable = variable name, [optional whitespace, ":", optional whitespace, data type];

n-execution = "^", optional whitespace, nonzero digit, optional whitespace, ( construction | entity );

entity = keyword | entity name | number | symbol;

type name = upperletter name;
           
entity name = (upperletter name
			  | quoted_name); //přidáno pro úkol https://rmine.cs.vsb.cz/issues/656

variable name = lowerletter name;

//object name = upperletter name;

keyword = 
	"ForAll" | 
	"Exist" | 
	"Every" | 
	"Some" | 
	"No" | 
	"True" | 
	"False" |
	"And" |
	"Or" |
	"Not" |
	"Implies" |
	"Sing" |
	"Sub" |
	"Tr" |
	"TrueC" |
	"FalseC" |
	"ImproperC" |
	"TrueP" |
	"FalseP" |
	"UndefP" |
	"ToInt"
;

lowercase letter = "a" | "b" | ... | "z"|"ě"|"š"|"č"|"ř"|"ý"|"á"|"ď"|"é"|"í"|"ň"|"ó"|"ú"|"ů"|"ť"|"ž";;
uppercase letter = "A" | "B" | ... | "Z"|"Ě"|"Š"|"Č"|"Ř"|"Ý"|"Á"|"Ď"|"É"|"Í"|"Ň"|"Ú"|"Ó"|"Ů"|"Ť"|"Ž";;


symbols = "+" | "-" | "*" | "/"| "=";

zero = "0" ;

nonzero digit = "1" | "2" | ... | "9";

ANY =  "Any",{ zero | nonzero digit};

number = ( zero | nonzero digit),  { zero | nonzero digit } [".",  (zero | nonzero digit), { zero | nonzero digit }];

upperletter name = uppercase letter, { lowercase letter | uppercase letter | "_" | zero | nonzero digit };

lowerletter name = lowercase letter, { lowercase letter | uppercase letter | "_" | zero | nonzero digit };

quoted_name: '`' [^'`']+ '`'; //přidáno pro úkol https://rmine.cs.vsb.cz/issues/656 

whitespace = whitespace character, optional whitespace;

optional whitespace = { whitespace character };

whitespace character = ? space ? | ? tab ? | ? newline ?;



