def variable: Int.

let pi: Real = '3.14159.

['/ '4 '2].
['/ '6 '2].
let fromConstruction: Int = ['/ '4 '2].

fromConstruction.

defn Divisible(num: Int, divisor: Int) -> Bool =
    ['If ['= num '0]
        'True
        ['If ['< num '0]
            'False
            ['Divisible ['- num divisor] divisor]]].

-- pica

Tilman/Indiv.

Seek / ( Bool Indiv *) @tw.

Lastdec/(Int Real).

Pi/Real.

[\w: World [\t:Time['Seek@wt 'Tilman '['Lastdec 'Pi]]]].

defn DruhaMocnina(x: Int) -> Int = ['* x x].

['Println [\y:Int[\x:Int['+ y  x]]]].

defn Add(x: Int, y: Int) -> Int = ['+ x y].

let list: List<Int> = { '1, '2, '3 }.

['Println '['DruhaMocnina '2]].
['Println list].
['Println ['Cons ['Plus '1 '2] 'Nil]].
['Println ['MkTuple '1 '2 '"asdf"]].
['Println ['+ pi '1.5]].
['Println ['Divisible '4 '2]].
['Println ['Divisible '5 '2]].
