Import "class://org.fpeterek.tilscript.math.Registrar".


Defn PrettyPrint(cons: Construction) -> Any1 :=
    ['Progn
        ['Print cons]
        ['Print '": "]
        ['Println ^2 cons]].


Struct Polar {
    dist: Real,
    angle: Real,
}.

Struct Cart {
    x: Real,
    y: Real,
}.

Defn GetAngle(x: Real, y: Real, len: Real) -> Real :=
    ['Cond
        ['= '0.0 len] '0.0
        ['> y '0.0] ['Acos ['/ x len]]
        'True ['- '360.0 ['Acos ['/ x len]]]].

Defn CartToPolar(cart: Cart) -> Polar :=
    [[\dist: Real -> Polar
        {Polar dist ['GetAngle cart::x cart::y dist] }]
        ['Sqrt ['+ ['* cart::x cart::x] ['* cart::y cart::y]]] ].

cart1 -> Cart := {Cart '2.0 '2.0}.
cart2 -> Cart := {Cart '2.0 '0.0}.
cart3 -> Cart := {Cart ['- '0.0 '3.0] '1.0}.
cart4 -> Cart := {Cart '0.0 '2.0}.

['Println ['CartToPolar cart1]].
['Println ['CartToPolar cart2]].
['Println ['CartToPolar cart3]].
['Println ['CartToPolar cart4]].


Struct Tree {
    value: Int,
    subtrees: List(Tree),
}.

myTree -> Tree := {Tree
    '1
    ['ListOf 
        {Tree '2 {List(Tree) }}
        {Tree '3 ['ListOf {Tree '4 {List(Tree) } }]}]}.

Defn MaxOf(fst: Int, snd: Int) -> Int := 
    ['If ['> fst snd] fst snd].

Defn MaxInt(lst: List(Int), max: Int) -> Int :=
    ['If ['IsEmpty lst]
        max
        ['MaxInt ['Tail lst] ['MaxOf ['Head lst] max]]].


Defn Max(lst: List(Int)) -> Int := ['MaxInt ['Tail lst] ['Head lst]].

Defn Depths(trees: List(Tree)) -> List(Int) :=
    ['If ['IsEmpty trees]
        {List(Int) }
        ['Cons 
            ['Depth ['Head trees]] 
            ['Depths ['Tail trees]]]].

Defn Depth(tree: Tree) -> Int := 
    ['If ['IsEmpty tree::subtrees]
        '1
        ['+ '1 ['Max ['Depths tree::subtrees]]]].

['PrettyPrint 'myTree::subtrees].
['PrettyPrint '['Depth myTree]].
