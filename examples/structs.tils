import "fns.tils".

struct TestStruct {
    first: Int,
    second: Real,
    third: Text
}.

let myStruct: TestStruct = {TestStruct '1 '1.0 '"one"}.

['PrintRes 'myStruct].

struct Tree {
    value: Int,
    subtrees: List<Tree>
}.

let myTree: Tree = {Tree
    '1
    ['ListOf 
        {Tree '2 {List<Tree> }}
        {Tree '3 ['ListOf {Tree '4 {List<Tree> } }]}]}.

defn MaxOf(fst: Int, snd: Int) -> Int = 
    ['If
        ['> fst snd] fst
        'True snd].

defn MaxInt(lst: List<Int>, max: Int) -> Int =
    ['If
        ['IsEmpty lst] max
        'True ['MaxInt ['Tail lst] ['MaxOf ['Head lst] max]]].


defn Max(lst: List<Int>) -> Int = ['MaxInt ['Tail lst] ['Head lst]].

defn Depths(trees: List<Tree>) -> List<Int> =
    ['If
        ['IsEmpty trees] {List<Int> }
        'True ['Cons 
                    ['Depth ['Head trees]] 
                    ['Depths ['Tail trees]]]].

defn Depth(tree: Tree) -> Int = 
    ['If 
        ['IsEmpty tree->subtrees] '1
        'True ['+ '1 ['Max ['Depths tree->subtrees]]]].

['PrintRes 'myTree->subtrees].
['PrintRes '['Depth myTree]].
